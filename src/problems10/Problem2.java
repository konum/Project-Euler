package problems10;

import java.util.stream.Collectors;
import java.util.stream.Stream;
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import core.EulerpProblem;

public class Problem2 extends EulerpProblem {
	public Problem2() {
		this.setName("Problem2");
	}

	public static void main(String[] args) {
		new Problem1().run();
	}

	public void solve() {
		long sum = Stream
				.iterate(new long[] { 1, 1 },
						p -> new long[] { p[1], p[0] + p[1] }).limit(50)
				.filter(val -> val[1] < 4000000 && val[1] % 2 == 0)
				.collect(Collectors.summarizingLong(p -> p[1])).getSum();
		this.setResult(sum);
	}
}
